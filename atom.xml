<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo by heroyf</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hexo.heroyf.club/"/>
  <updated>2018-05-31T04:30:26.019Z</updated>
  <id>https://hexo.heroyf.club/</id>
  
  <author>
    <name>Heroyf</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go语言零基础入门第一节</title>
    <link href="https://hexo.heroyf.club/2018/05/30/Go%E8%AF%AD%E8%A8%80%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E8%8A%82/"/>
    <id>https://hexo.heroyf.club/2018/05/30/Go语言零基础入门第一节/</id>
    <published>2018-05-30T09:27:07.368Z</published>
    <updated>2018-05-31T04:30:26.019Z</updated>
    
    <content type="html"><![CDATA[<h2 id="go语言的关键字"><a href="#go语言的关键字" class="headerlink" title="go语言的关键字"></a>go语言的关键字</h2><table class="reference"><br><tbody><tr><br><td style="width:25%">break</td><td style="width:25%">default</td><td style="width:25%">func</td><td style="width:25%">interface</td><td style="width:25%">select</td></tr><br><tr><td>case</td><td>defer</td><td>go</td><td>map</td><td>struct</td></tr><br><tr><td>chan</td><td>else</td><td>goto</td><td>package</td><td>switch</td></tr><br><tr><td>const</td><td>fallthrough</td><td>if</td><td>range</td><td>type</td></tr><br><tr><td>continue</td><td>for</td><td>import</td><td>return</td><td>var</td></tr><br></tbody></table><br>除了以上介绍的这些关键字，Go 语言还有 36 个预定义标识符：<br><table class="reference"><br>  <tbody><tr><br>    <td>append</td><br>    <td>bool</td><br>    <td>byte</td><br>    <td>cap</td><br>    <td>close</td><br>    <td>complex</td><br>    <td>complex64</td><br>    <td>complex128</td><br>    <td>uint16</td><br>  </tr><br>  <tr><br>    <td>copy</td><br>    <td>false</td><br>    <td>float32</td><br>    <td>float64</td><br>    <td>imag</td><br>    <td>int</td><br>    <td>int8</td><br>    <td>int16</td><br>    <td>uint32</td><br>  </tr><br>  <tr><br>    <td>int32</td><br>    <td>int64</td><br>    <td>iota</td><br>    <td>len</td><br>    <td>make</td><br>    <td>new</td><br>    <td>nil</td><br>    <td>panic</td><br>    <td>uint64</td><br>  </tr><br>  <tr><br>    <td>print</td><br>    <td>println</td><br>    <td>real</td><br>    <td>recover</td><br>    <td>string</td><br>    <td>true</td><br>    <td>uint</td><br>    <td>uint8</td><br>    <td>uintptr</td><br>  </tr><br></tbody></table><h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h3><p>foo    #合法<br>foo1    #合法<br>_foo    #合法<br>变量    #合法<br>变量1    #合法<br>_变量     #合法</p><p>1foo    #不合法<br>1    #不合法<br>type    #不合法<br>go    #不合法</p><h2 id="变量声明格式"><a href="#变量声明格式" class="headerlink" title="变量声明格式"></a>变量声明格式</h2><hr><p><strong>&lt;命名&gt;  &lt;类型&gt;</strong></p><p>例如</p><pre><code>x   int  //定义x为整数类型</code></pre><h3 id="使用var来声明变量"><a href="#使用var来声明变量" class="headerlink" title="使用var来声明变量"></a>使用var来声明变量</h3><pre><code>var x int  //表示声明一个名为x的整数类型var b int = 1 // 表示声明一个名为b的整数变量，且附上初值为1var b = 1   //不需要声明类型自动推断</code></pre><p>如果有多个变量同时声明，我们可以采用var加括号批量进行声明<br>[scode type=”blue”]以下方式通常用于声明全局变量[/scode]</p><pre><code>var {    a,b int   //同时声明a，b整数    c float64}</code></pre><h3 id="简短声明方式"><a href="#简短声明方式" class="headerlink" title="简短声明方式"></a>简短声明方式</h3><p>变量在声明的时候如果有初始值，可以使用：=进行简短的声明方式<br>[scode type=”red”]注意：=左边的变量不应该是已经声明过的，否则会导致编译错误[/scode]</p><pre><code>a := 1  //声明a为1的整数b := int64(1)   //声明b为1的64位整数 </code></pre><p>我们知道可以在变量的初始化时省略变量的类型而由系统自动推断，声明语句写上 var 关键字其实是显得有些多余了，因此我们可以将它们简写为 a := 50 或 b := false。<br>a 和 b 的类型（int 和 bool）将由编译器自动推断。<br>这是使用变量的首选形式，但是它只能被用在函数体内，而不可以用于全局变量的声明与赋值。使用操作符 := 可以高效地创建一个新的变量，称之为初始化声明。<br>[scode type=”yellow”]如果在相同的代码块中，我们不可以再次对于相同名称的变量使用初始化声明，例如：a := 20 就是不被允许的，编译器会提示错误 no new variables on left side of :=</p><p>但是 a = 20 是可以的，因为这是给相同的变量赋予一个新的值。如果你在定义变量 a 之前使用它，则会得到编译错误 undefined: a。</p><p>如果你声明了一个局部变量却没有在相同的代码块中使用它，同样会得到编译错误，例如下面这个例子当中的变量 a：[/scode]   </p><p>例子：</p><pre><code>package mainimport &quot;fmt&quot;func main() {   var a string = &quot;abc&quot;   fmt.Println(&quot;hello, world&quot;)}</code></pre><p>尝试编译这段代码将得到错误 <font color="#ff0000" size="5" face="黑体">a declared and not used。</font><br>此外，单纯地给 a 赋值也是不够的，这个值必须被使用，所以使用</p><p>所以解决方法：</p><pre><code>fmt.Println(&quot;hello, world&quot;, a)</code></pre><p>会移除错误。<br>但是全局变量是允许声明但不使用。 同一类型的多个变量可以声明在同一行，如：</p><p><code>var a b c int</code></p><p>多变量可以在同一行进行赋值，如：<br>    var a, b int<br>    var c string<br>    a, b, c = 5, 7, “abc”<br>上面这行假设了变量 a，b 和 c 都已经被声明，否则的话应该这样使用：</p><p><code>a, b, c := 5, 7, &quot;abc&quot;</code></p><p>右边的这些值以相同的顺序赋值给左边的变量，所以 a 的值是 5， b 的值是 7，c 的值是 “abc”。<br>这被称为 并行 或 同时 赋值。<br>如果你想要交换两个变量的值，则可以简单地使用 a, b = b, a。</p><p>空白标识符 _ 也被用于抛弃值，如值 5 在：_, b = 5, 7 中被抛弃。<br>_ 实际上是一个只写变量，你不能得到它的值。这样做是因为 Go 语言中你必须使用所有被声明的变量，但有时你并不需要使用从一个函数得到的所有返回值。</p><p>并行赋值也被用于当一个函数返回多个返回值时，比如这里的 val 和错误 err 是通过调用 Func1 函数同时得到：val, err = Func1(var1)。</p><h3 id="常量定义"><a href="#常量定义" class="headerlink" title="常量定义"></a>常量定义</h3><p>1、定义的时候，必须制定值<br>2、指定的类型主要有三类，布尔，数字，字符串，其中数字类型包含（rune，interger，floating-point，complex），它们都属于基本数据类型。<br><strong>3、不能使用 :=</strong></p><p><em>常量定义格式</em><br><code>const identifier [type] = value</code></p><p>你可以省略类型说明符 [type]，因为编译器可以根据变量的值来推断其类型。</p><ul><li>显式类型定义： const b string = “abc”</li><li>隐式类型定义： const b = “abc”</li></ul><p>多个相同类型的声明可以简写为：</p><p><code>const c_name1, c_name2 = value1, value2</code></p><pre><code>const a=64   //定义常量值为64的值const {      //常量用作枚举    b = 4    c = 0.1}</code></pre><p>下列是常量的应用代码：</p><pre><code>package mainimport &quot;fmt&quot;func main() {   const LENGTH int = 10   const WIDTH int = 5      var area int   const a, b, c = 1, false, &quot;str&quot; //多重赋值   area = LENGTH * WIDTH   fmt.Printf(&quot;面积为 : %d&quot;, area)   println()   println(a, b, c)   }</code></pre><p>   以上实例运行结果为：</p><pre><code>面积为 : 501 false str</code></pre><p>常量可以用len(), cap(), unsafe.Sizeof()函数计算表达式的值。常量表达式中，函数必须是内置函数，否则编译不过：</p><pre><code>package mainimport &quot;unsafe&quot;const (    a = &quot;abc&quot;    b = len(a)    c = unsafe.Sizeof(a))func main(){    println(a, b, c)}</code></pre><p>以上代码的运行结果：<br><code>abc 3 16</code></p><p>最后输出为16的原因<br>字符串类型在 go 里是个结构, 包含指向底层数组的指针和长度,这两部分每部分都是 8 个字节，所以字符串类型大小为 16 个字节。</p><h3 id="iota"><a href="#iota" class="headerlink" title="iota"></a>iota</h3><p>iota，特殊常量，可以认为是一个可以被编译器修改的常量。<br>在每一个const关键字出现时，被重置为0，然后再下一个const出现之前，每出现一次iota，其所代表的数字会自动增加1。<br>iota 可以被用作枚举值：</p><pre><code>const (    a = iota    b = iota    c = iota)</code></pre><p>第一个 iota 等于 0，每当 iota 在新的一行被使用时，它的值都会自动加 1；所以 a=0, b=1, c=2 可以简写为如下形式：</p><pre><code>const (    a = iota    b    c)</code></pre><p>iota 用法</p><pre><code>package mainimport &quot;fmt&quot;func main() {    const (            a = iota   //0            b          //1            c          //2            d = &quot;ha&quot;   //独立值，iota += 1            e          //&quot;ha&quot;   iota += 1            f = 100    //iota +=1            g          //100  iota +=1            h = iota   //7,恢复计数            i          //8    )    fmt.Println(a,b,c,d,e,f,g,h,i)}</code></pre><p>以上实例运行结果为：<br><code>0 1 2 ha ha 100 100 7 8</code></p><p>看个有趣的的 iota 实例：</p><pre><code>package mainimport &quot;fmt&quot;const (    i=1&lt;&lt;iota    j=3&lt;&lt;iota    k    l)func main() {    fmt.Println(&quot;i=&quot;,i)    fmt.Println(&quot;j=&quot;,j)    fmt.Println(&quot;k=&quot;,k)    fmt.Println(&quot;l=&quot;,l)}</code></pre><p>以上实例运行结果为：</p><pre><code>i= 1j= 6k= 12l= 24</code></pre><p>iota 表示从 0 开始自动加 1，所以 <code>i=1&lt;&lt;0, j=3&lt;&lt;1</code>（&lt;&lt; 表示左移的意思），即：i=1, j=6，这没问题，关键在 k 和 l，从输出结果看 <code>k=3&lt;&lt;2，l=3&lt;&lt;3</code>。</p><p>简单表述:</p><p>i=1：左移 0 位,不变仍为 1;<br>j=3：左移 1 位,变为二进制 110, 即 6;<br>k=3：左移 2 位,变为二进制 1100, 即 12;<br>l=3：左移 3 位,变为二进制 11000,即 24。</p><p>完整代码实例:<br>    package main<br>    func main(){<br>        var too string<br>        var too2 string = “hello”<br>        var(<br>            foo3,foo4 string<br>        )<br>        foo5 := “hello”  //不带声明格式的只能出现在函数体<br>        const c1 = 3<br>        const (<br>            c2 = 4<br>            c3 = 5<br>        )<br>        c3 = 1   //报错：常量值不可再被修改<br>    }</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;go语言的关键字&quot;&gt;&lt;a href=&quot;#go语言的关键字&quot; class=&quot;headerlink&quot; title=&quot;go语言的关键字&quot;&gt;&lt;/a&gt;go语言的关键字&lt;/h2&gt;&lt;table class=&quot;reference&quot;&gt;&lt;br&gt;&lt;tbody&gt;&lt;tr&gt;&lt;br&gt;&lt;td s
      
    
    </summary>
    
    
  </entry>
  
</feed>
